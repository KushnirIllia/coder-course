/* * Fonts import */
/* https://fonts.google.com */
/* https://webfonts.pro */
/* https://transfonter.org (ttf to woff, woff2) */

/*  &display=swap */
/*  for cyrillic:    &subset=cyrillic-ex */

/* * Fonts local import */

/* * Icons Fonts */
/* https://www.iconfinder.com/ */
/* https://icomoon.io */

/* * Reset styles */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	font-size: 16px; /* default size: 16px*/
}
body {
	overflow-x: hidden; /* for 	position: sticky */
	line-height: 1; /* default: 1*/
	/* font-family */
	/* color */
	/* font-size */
	background: rgb(32, 32, 32);
}
.wrapper {
	min-height: 100%;
	padding: 50px;
}

[class*="__container"] {
	/* max-width: 1200px; */
	margin: 0px auto;
}
/* ---------------------------------- */
/** transition */
/*
CSS переходи або CSS transitions можуть застосовуватись до всіх елементів і навіть до псевдоелементів.
Використовуються для пожвавлення нашої верстки. Що в свою чергу призводить до покращення взаємодії з 
користувачем, зазвичай шляхом приємної анімованої реакції на його дії.
Наприклад, наведення та натискання на кнопку. Також властивості transition можна використовувати 
для побудови нескладних сценаріїв анімації. Фактично, CSS переходи забезпечують зміну значень 
інших властивостей з певною анімацією та сценарієм. Всю цю магію можна описати універсальним СЅЅ властивістю 
transition, або рядом наступних окремих властивостей:
*/
.link {
	color: yellow;
	font-size: 14px;

	transition-duration: 0s;
}
/*! Put real class  */
.link_transition {
	/*
	? transition-duration:
	Визначає проміжок часу, протягом якого має здійснюватись перехід. 
	Власне - тут ми вказуємо час за яке одне значення якості переходить (анімується) в інше.
	Властивість не успадковується.
	*/
	transition-duration: 0.2s, 0.5s;

	/* 
	? transition-property: 
	Містить назву CSS-властивостей, до яких буде використано ефект переходу. 
	Значення властивості може містити як одну властивість, так і список властивостей через кому.
	Властивість не успадковується.
	*/
	transition-property: color, font-size;

	/*
	? transition-delay
	Затримка виконання переходу. Дозволяє зробити так, щоб зміна якості відбувалася нe
	миттєво, а з деякою затримкою. Час затримки переходу вказується 
	у секундах або мілісекундах. 
	Властивість не успадковується. 
	*/
	transition-delay: 0s, 0.5s;

	/*
	? transition-timing-function
	Задає стиль нашого переходу, тобто якийсь сценарій, за яким здійсняться анімація.
	
	steps(4, start/end)
	*/
	transition-timing-function: ease, ease;

	/** Universal */
	transition: all 0.3s ease 0s;
}

.link:hover {
	color: red;
	font-size: 20px;
}

/* .button {
	display: inline-block;
	color: #fff;
	background-color: green;
	border-radius: 10px;
	padding: 10px 15px;
	box-shadow: 0px 5px 1px 0px #000;
	transition: all 0.3s ease 0s;
}
.button:hover {
	box-shadow: 0px 2px 1px 0px #000;
	transform: translate3d(0px, 4px, 0px);
} */

.menu {
	overflow: hidden;
	padding: 10px;
}
.menu:hover .menu__list,
.menu:hover .menu__item {
	transform: translate3d(0px, 0px, 0px);
	opacity: 1;
	transition-duration: 0.6s;
}
.menu:hover .menu__list {
	transition-delay: 0s;
}

.menu__list {
	background-color: #794f45;
	padding: 15px;
	transform: translate3d(-100%, 0px, 0px);
	transition: all 0.5s ease 0s;
	opacity: 0;
	overflow: hidden;
	transition-delay: 0.8s;
}
.menu__item {
	transform: translate3d(-100%, 0px, 0px);
	transition: all 0.6s ease 0s;
}

.menu__item:nth-child(1) {
	transition-delay: 0s;
}
.menu__item:nth-child(2) {
	transition-delay: 0.2s;
}
.menu__item:nth-child(3) {
	transition-delay: 0.4s;
}
.menu__item:nth-child(4) {
	transition-delay: 0.6s;
}

.menu__item:not(:last-child) {
	margin-bottom: 20px;
}
.menu__link {
	padding: 6px 4px;
	color: #fff;
}

/* ---------------------------------- */

/* 
* animation
Як і CSS властивість плавних переходів transition, про який ми говорили в попередньому уроці, 
властивість animation покликана зробити нашу верстку динамічнішою, пожвавити її для кращої взаємодії 
з користувачем та створення WOW ефекту.

Але на відміну від CSS переходів, створення анімації базується на ключових кадрах @keyframes,
які дозволяють автоматично відтворювати та повторювати ефекти протягом заданого часу, а також зупиняти 
анімацію за певною подією.

Іншими словами, використання конструкції animation та @keyframes дозволяє нам створювати більш складні 
сценарії анімацій. 
*/
/*! Put real class  */
.animation {
	/*
		? animation-name
		Визначає список анімацій (ключових кадрів), що застосовуються до елемента. 
		Можна вказати через кому. Причому пріоритет останній запис.
	*/
	animation-name: somename;
	/*
		? animation-duration
		Відповідає за тривалість анімації.
	*/
	animation-duration: 1s;
	/*
		? animation-timing-function
		ease linear cubic-bezier ...
		Встановлює сценарій розвитку анімації між ключовими кадрами.
	*/
	animation-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
	/*
		? animation-delay
		Відповідає за затримку перед відтворенням.
		*/
	animation-delay: 2s;
	/*
		? animation-iteration-count
		! infinite drob number
		Відповідає за повтор відтворення ключових кадрів.
	*/
	animation-iteration-count: 1;
	/*
		? animation-direction
		! alternate normal reverse ...
		Визначає напрямок та тип відтворення ключових кадрів.
	*/
	animation-direction: alternate;
	/*
		? animation-fill-mode
		! forwards - залишиться на кінцевому (100%)
		! backwards - повернеться на початкове значення
		! none
		Визначає, які значення анімовани х css властивостей застосовуються до об'єкта після завершення анімації.
	*/
	animation-fill-mode: forwards;
	/*
		? animation-play-state
		! running paused
		Дозволяє запускати або зупиняти анімацію за подією.
	*/
	animation-play-state: running;
}

.block {
	position: relative;
	width: 200px;
	height: 200px;
	background-color: #7a956b;
	animation-name: somename;
	animation-duration: 1s;
	animation-timing-function: linear;
	animation-iteration-count: 1;
	animation-delay: 0s;
	animation-direction: alternate;
}
.block:hover {
	animation-play-state: paused;
}
/* .block::before {
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	background-color: #7a956b;
	transform: rotate(-45deg);
	top: 0;
	left: 0;
} */

@keyframes somename {
	0% {
		transform: translate3d(0px, 0px, 0px);
		/* transform: rotate(0deg); */
	}
	50% {
		border-radius: 50%;
		background-color: #794f45;
	}
	100% {
		transform: translate3d(100px, 0px, 0px);
		/* transform: rotate(360deg); */
	}
}
.crescent {
	margin: 0px 0px 50px 0px;
}
.crescent__body {
	width: 500px;
	height: 500px;
	transform-origin: 53.333% 68.666%;
	animation: crescent-anim 5s 1 ease-out alternate forwards;
	overflow: hidden;
}
.crescent__item {
	background-color: #fff;
	width: 100%;
	height: 100%;
	border-radius: 50%;
	position: relative;
	animation: crescent-init 1s 1 linear forwards;
}
.crescent__item::before {
	content: "";
	background-color: rgb(32, 32, 32);
	position: absolute;
	border-radius: 50%;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	animation: crescent-shadow 1s 1 linear forwards;
}
@keyframes crescent-anim {
	0% {
		transform: rotate(0deg);
	}
	25% {
		transform: rotate(20deg);
	}
	50% {
		transform: rotate(10deg);
	}
	75% {
		transform: rotate(20deg);
	}
	100% {
		transform: rotate(15deg);
	}
}
@keyframes crescent-init {
	0% {
		transform: translate3d(-30%, 0px, 0px);
	}
	100% {
		transform: rotate(45deg) translate3d(0px, 0px, 0px);
	}
}
@keyframes crescent-shadow {
	0% {
		transform: translate3d(0px, 0px, 0px);
	}
	100% {
		transform: translate3d(-16.6%, 16.6%, 0px);
	}
}

.clock {
	border-top: 3px solid rgb(83, 83, 83);
	margin: 0px 0px 100px 0px;
	height: 500px;
	max-width: 900px;
	margin: 0px auto;
}
.clock__item {
	position: relative;
	width: 1px;
}
.clock__item::before {
	content: "";
	position: absolute;
	width: 2px;
	top: 0;
	height: 300px;
	background-color: rgb(83, 83, 83);
	transform-origin: 0 0;
}
.clock__item::after {
	content: "";
	position: absolute;
	width: 90px;
	height: 90px;
	top: 300px;
	left: 50%;
	transform: translate3d(-50%, 0px, 0px);
	background-color: #fff;
	border-radius: 50%;
}
.clock__item:nth-child(1) {
	left: 40%;
	animation: item-1 1s infinite ease-in-out forwards alternate;
}
.clock__item:nth-child(2) {
	left: 50%;
}
.clock__item:nth-child(3) {
	left: 60%;
	animation: item-2 1s infinite ease-out forwards alternate;
}
@keyframes item-1 {
	0% {
		transform: rotate(45deg);
	}
	50% {
		transform: rotate(0deg);
	}
}
@keyframes item-2 {
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}
